# source: http://localhost:4466/georef/dev
# timestamp: Sat Jul 06 2019 14:40:51 GMT-0300 (Argentina Standard Time)

type AggregateDepartamento {
  count: Int!
}

type AggregateLocalidad {
  count: Int!
}

type AggregatePais {
  count: Int!
}

type AggregateProvincia {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Departamento {
  id: Int!
  codigo_indec: String
  nombre: String!
  provincia: Provincia!
  localidades(where: LocalidadWhereInput, orderBy: LocalidadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Localidad!]
}

"""A connection to a list of items."""
type DepartamentoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartamentoEdge]!
  aggregate: AggregateDepartamento!
}

input DepartamentoCreateInput {
  codigo_indec: String
  nombre: String!
  provincia: ProvinciaCreateOneWithoutDepartamentosInput!
  localidades: LocalidadCreateManyWithoutDepartamentoInput
}

input DepartamentoCreateManyWithoutProvinciaInput {
  create: [DepartamentoCreateWithoutProvinciaInput!]
  connect: [DepartamentoWhereUniqueInput!]
}

input DepartamentoCreateOneWithoutLocalidadesInput {
  create: DepartamentoCreateWithoutLocalidadesInput
  connect: DepartamentoWhereUniqueInput
}

input DepartamentoCreateWithoutLocalidadesInput {
  codigo_indec: String
  nombre: String!
  provincia: ProvinciaCreateOneWithoutDepartamentosInput!
}

input DepartamentoCreateWithoutProvinciaInput {
  codigo_indec: String
  nombre: String!
  localidades: LocalidadCreateManyWithoutDepartamentoInput
}

"""An edge in a connection."""
type DepartamentoEdge {
  """The item at the end of the edge."""
  node: Departamento!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DepartamentoOrderByInput {
  id_ASC
  id_DESC
  codigo_indec_ASC
  codigo_indec_DESC
  nombre_ASC
  nombre_DESC
}

type DepartamentoPreviousValues {
  id: Int!
  codigo_indec: String
  nombre: String!
}

input DepartamentoScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartamentoScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartamentoScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartamentoScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  codigo_indec: String

  """All values that are not equal to given value."""
  codigo_indec_not: String

  """All values that are contained in given list."""
  codigo_indec_in: [String!]

  """All values that are not contained in given list."""
  codigo_indec_not_in: [String!]

  """All values less than the given value."""
  codigo_indec_lt: String

  """All values less than or equal the given value."""
  codigo_indec_lte: String

  """All values greater than the given value."""
  codigo_indec_gt: String

  """All values greater than or equal the given value."""
  codigo_indec_gte: String

  """All values containing the given string."""
  codigo_indec_contains: String

  """All values not containing the given string."""
  codigo_indec_not_contains: String

  """All values starting with the given string."""
  codigo_indec_starts_with: String

  """All values not starting with the given string."""
  codigo_indec_not_starts_with: String

  """All values ending with the given string."""
  codigo_indec_ends_with: String

  """All values not ending with the given string."""
  codigo_indec_not_ends_with: String
  nombre: String

  """All values that are not equal to given value."""
  nombre_not: String

  """All values that are contained in given list."""
  nombre_in: [String!]

  """All values that are not contained in given list."""
  nombre_not_in: [String!]

  """All values less than the given value."""
  nombre_lt: String

  """All values less than or equal the given value."""
  nombre_lte: String

  """All values greater than the given value."""
  nombre_gt: String

  """All values greater than or equal the given value."""
  nombre_gte: String

  """All values containing the given string."""
  nombre_contains: String

  """All values not containing the given string."""
  nombre_not_contains: String

  """All values starting with the given string."""
  nombre_starts_with: String

  """All values not starting with the given string."""
  nombre_not_starts_with: String

  """All values ending with the given string."""
  nombre_ends_with: String

  """All values not ending with the given string."""
  nombre_not_ends_with: String
}

type DepartamentoSubscriptionPayload {
  mutation: MutationType!
  node: Departamento
  updatedFields: [String!]
  previousValues: DepartamentoPreviousValues
}

input DepartamentoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartamentoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartamentoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartamentoSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DepartamentoWhereInput
}

input DepartamentoUpdateInput {
  codigo_indec: String
  nombre: String
  provincia: ProvinciaUpdateOneRequiredWithoutDepartamentosInput
  localidades: LocalidadUpdateManyWithoutDepartamentoInput
}

input DepartamentoUpdateManyDataInput {
  codigo_indec: String
  nombre: String
}

input DepartamentoUpdateManyMutationInput {
  codigo_indec: String
  nombre: String
}

input DepartamentoUpdateManyWithoutProvinciaInput {
  create: [DepartamentoCreateWithoutProvinciaInput!]
  connect: [DepartamentoWhereUniqueInput!]
  set: [DepartamentoWhereUniqueInput!]
  disconnect: [DepartamentoWhereUniqueInput!]
  delete: [DepartamentoWhereUniqueInput!]
  update: [DepartamentoUpdateWithWhereUniqueWithoutProvinciaInput!]
  updateMany: [DepartamentoUpdateManyWithWhereNestedInput!]
  deleteMany: [DepartamentoScalarWhereInput!]
  upsert: [DepartamentoUpsertWithWhereUniqueWithoutProvinciaInput!]
}

input DepartamentoUpdateManyWithWhereNestedInput {
  where: DepartamentoScalarWhereInput!
  data: DepartamentoUpdateManyDataInput!
}

input DepartamentoUpdateOneWithoutLocalidadesInput {
  create: DepartamentoCreateWithoutLocalidadesInput
  connect: DepartamentoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DepartamentoUpdateWithoutLocalidadesDataInput
  upsert: DepartamentoUpsertWithoutLocalidadesInput
}

input DepartamentoUpdateWithoutLocalidadesDataInput {
  codigo_indec: String
  nombre: String
  provincia: ProvinciaUpdateOneRequiredWithoutDepartamentosInput
}

input DepartamentoUpdateWithoutProvinciaDataInput {
  codigo_indec: String
  nombre: String
  localidades: LocalidadUpdateManyWithoutDepartamentoInput
}

input DepartamentoUpdateWithWhereUniqueWithoutProvinciaInput {
  where: DepartamentoWhereUniqueInput!
  data: DepartamentoUpdateWithoutProvinciaDataInput!
}

input DepartamentoUpsertWithoutLocalidadesInput {
  update: DepartamentoUpdateWithoutLocalidadesDataInput!
  create: DepartamentoCreateWithoutLocalidadesInput!
}

input DepartamentoUpsertWithWhereUniqueWithoutProvinciaInput {
  where: DepartamentoWhereUniqueInput!
  update: DepartamentoUpdateWithoutProvinciaDataInput!
  create: DepartamentoCreateWithoutProvinciaInput!
}

input DepartamentoWhereInput {
  """Logical AND on all given filters."""
  AND: [DepartamentoWhereInput!]

  """Logical OR on all given filters."""
  OR: [DepartamentoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DepartamentoWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  codigo_indec: String

  """All values that are not equal to given value."""
  codigo_indec_not: String

  """All values that are contained in given list."""
  codigo_indec_in: [String!]

  """All values that are not contained in given list."""
  codigo_indec_not_in: [String!]

  """All values less than the given value."""
  codigo_indec_lt: String

  """All values less than or equal the given value."""
  codigo_indec_lte: String

  """All values greater than the given value."""
  codigo_indec_gt: String

  """All values greater than or equal the given value."""
  codigo_indec_gte: String

  """All values containing the given string."""
  codigo_indec_contains: String

  """All values not containing the given string."""
  codigo_indec_not_contains: String

  """All values starting with the given string."""
  codigo_indec_starts_with: String

  """All values not starting with the given string."""
  codigo_indec_not_starts_with: String

  """All values ending with the given string."""
  codigo_indec_ends_with: String

  """All values not ending with the given string."""
  codigo_indec_not_ends_with: String
  nombre: String

  """All values that are not equal to given value."""
  nombre_not: String

  """All values that are contained in given list."""
  nombre_in: [String!]

  """All values that are not contained in given list."""
  nombre_not_in: [String!]

  """All values less than the given value."""
  nombre_lt: String

  """All values less than or equal the given value."""
  nombre_lte: String

  """All values greater than the given value."""
  nombre_gt: String

  """All values greater than or equal the given value."""
  nombre_gte: String

  """All values containing the given string."""
  nombre_contains: String

  """All values not containing the given string."""
  nombre_not_contains: String

  """All values starting with the given string."""
  nombre_starts_with: String

  """All values not starting with the given string."""
  nombre_not_starts_with: String

  """All values ending with the given string."""
  nombre_ends_with: String

  """All values not ending with the given string."""
  nombre_not_ends_with: String
  provincia: ProvinciaWhereInput
  localidades_every: LocalidadWhereInput
  localidades_some: LocalidadWhereInput
  localidades_none: LocalidadWhereInput
}

input DepartamentoWhereUniqueInput {
  id: Int
  codigo_indec: String
}

type Localidad {
  id: Int!
  codigo_indec: String
  nombre: String!
  provincia: Provincia!
  departamento: Departamento
  lat: Float
  lon: Float
  activo: Boolean!
}

"""A connection to a list of items."""
type LocalidadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocalidadEdge]!
  aggregate: AggregateLocalidad!
}

input LocalidadCreateInput {
  codigo_indec: String
  nombre: String!
  lat: Float
  lon: Float
  activo: Boolean!
  provincia: ProvinciaCreateOneWithoutLocalidadesInput!
  departamento: DepartamentoCreateOneWithoutLocalidadesInput
}

input LocalidadCreateManyWithoutDepartamentoInput {
  create: [LocalidadCreateWithoutDepartamentoInput!]
  connect: [LocalidadWhereUniqueInput!]
}

input LocalidadCreateManyWithoutProvinciaInput {
  create: [LocalidadCreateWithoutProvinciaInput!]
  connect: [LocalidadWhereUniqueInput!]
}

input LocalidadCreateWithoutDepartamentoInput {
  codigo_indec: String
  nombre: String!
  lat: Float
  lon: Float
  activo: Boolean!
  provincia: ProvinciaCreateOneWithoutLocalidadesInput!
}

input LocalidadCreateWithoutProvinciaInput {
  codigo_indec: String
  nombre: String!
  lat: Float
  lon: Float
  activo: Boolean!
  departamento: DepartamentoCreateOneWithoutLocalidadesInput
}

"""An edge in a connection."""
type LocalidadEdge {
  """The item at the end of the edge."""
  node: Localidad!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocalidadOrderByInput {
  id_ASC
  id_DESC
  codigo_indec_ASC
  codigo_indec_DESC
  nombre_ASC
  nombre_DESC
  lat_ASC
  lat_DESC
  lon_ASC
  lon_DESC
  activo_ASC
  activo_DESC
}

type LocalidadPreviousValues {
  id: Int!
  codigo_indec: String
  nombre: String!
  lat: Float
  lon: Float
  activo: Boolean!
}

input LocalidadScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalidadScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalidadScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalidadScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  codigo_indec: String

  """All values that are not equal to given value."""
  codigo_indec_not: String

  """All values that are contained in given list."""
  codigo_indec_in: [String!]

  """All values that are not contained in given list."""
  codigo_indec_not_in: [String!]

  """All values less than the given value."""
  codigo_indec_lt: String

  """All values less than or equal the given value."""
  codigo_indec_lte: String

  """All values greater than the given value."""
  codigo_indec_gt: String

  """All values greater than or equal the given value."""
  codigo_indec_gte: String

  """All values containing the given string."""
  codigo_indec_contains: String

  """All values not containing the given string."""
  codigo_indec_not_contains: String

  """All values starting with the given string."""
  codigo_indec_starts_with: String

  """All values not starting with the given string."""
  codigo_indec_not_starts_with: String

  """All values ending with the given string."""
  codigo_indec_ends_with: String

  """All values not ending with the given string."""
  codigo_indec_not_ends_with: String
  nombre: String

  """All values that are not equal to given value."""
  nombre_not: String

  """All values that are contained in given list."""
  nombre_in: [String!]

  """All values that are not contained in given list."""
  nombre_not_in: [String!]

  """All values less than the given value."""
  nombre_lt: String

  """All values less than or equal the given value."""
  nombre_lte: String

  """All values greater than the given value."""
  nombre_gt: String

  """All values greater than or equal the given value."""
  nombre_gte: String

  """All values containing the given string."""
  nombre_contains: String

  """All values not containing the given string."""
  nombre_not_contains: String

  """All values starting with the given string."""
  nombre_starts_with: String

  """All values not starting with the given string."""
  nombre_not_starts_with: String

  """All values ending with the given string."""
  nombre_ends_with: String

  """All values not ending with the given string."""
  nombre_not_ends_with: String
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lon: Float

  """All values that are not equal to given value."""
  lon_not: Float

  """All values that are contained in given list."""
  lon_in: [Float!]

  """All values that are not contained in given list."""
  lon_not_in: [Float!]

  """All values less than the given value."""
  lon_lt: Float

  """All values less than or equal the given value."""
  lon_lte: Float

  """All values greater than the given value."""
  lon_gt: Float

  """All values greater than or equal the given value."""
  lon_gte: Float
  activo: Boolean

  """All values that are not equal to given value."""
  activo_not: Boolean
}

type LocalidadSubscriptionPayload {
  mutation: MutationType!
  node: Localidad
  updatedFields: [String!]
  previousValues: LocalidadPreviousValues
}

input LocalidadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalidadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalidadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalidadSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocalidadWhereInput
}

input LocalidadUpdateInput {
  codigo_indec: String
  nombre: String
  lat: Float
  lon: Float
  activo: Boolean
  provincia: ProvinciaUpdateOneRequiredWithoutLocalidadesInput
  departamento: DepartamentoUpdateOneWithoutLocalidadesInput
}

input LocalidadUpdateManyDataInput {
  codigo_indec: String
  nombre: String
  lat: Float
  lon: Float
  activo: Boolean
}

input LocalidadUpdateManyMutationInput {
  codigo_indec: String
  nombre: String
  lat: Float
  lon: Float
  activo: Boolean
}

input LocalidadUpdateManyWithoutDepartamentoInput {
  create: [LocalidadCreateWithoutDepartamentoInput!]
  connect: [LocalidadWhereUniqueInput!]
  set: [LocalidadWhereUniqueInput!]
  disconnect: [LocalidadWhereUniqueInput!]
  delete: [LocalidadWhereUniqueInput!]
  update: [LocalidadUpdateWithWhereUniqueWithoutDepartamentoInput!]
  updateMany: [LocalidadUpdateManyWithWhereNestedInput!]
  deleteMany: [LocalidadScalarWhereInput!]
  upsert: [LocalidadUpsertWithWhereUniqueWithoutDepartamentoInput!]
}

input LocalidadUpdateManyWithoutProvinciaInput {
  create: [LocalidadCreateWithoutProvinciaInput!]
  connect: [LocalidadWhereUniqueInput!]
  set: [LocalidadWhereUniqueInput!]
  disconnect: [LocalidadWhereUniqueInput!]
  delete: [LocalidadWhereUniqueInput!]
  update: [LocalidadUpdateWithWhereUniqueWithoutProvinciaInput!]
  updateMany: [LocalidadUpdateManyWithWhereNestedInput!]
  deleteMany: [LocalidadScalarWhereInput!]
  upsert: [LocalidadUpsertWithWhereUniqueWithoutProvinciaInput!]
}

input LocalidadUpdateManyWithWhereNestedInput {
  where: LocalidadScalarWhereInput!
  data: LocalidadUpdateManyDataInput!
}

input LocalidadUpdateWithoutDepartamentoDataInput {
  codigo_indec: String
  nombre: String
  lat: Float
  lon: Float
  activo: Boolean
  provincia: ProvinciaUpdateOneRequiredWithoutLocalidadesInput
}

input LocalidadUpdateWithoutProvinciaDataInput {
  codigo_indec: String
  nombre: String
  lat: Float
  lon: Float
  activo: Boolean
  departamento: DepartamentoUpdateOneWithoutLocalidadesInput
}

input LocalidadUpdateWithWhereUniqueWithoutDepartamentoInput {
  where: LocalidadWhereUniqueInput!
  data: LocalidadUpdateWithoutDepartamentoDataInput!
}

input LocalidadUpdateWithWhereUniqueWithoutProvinciaInput {
  where: LocalidadWhereUniqueInput!
  data: LocalidadUpdateWithoutProvinciaDataInput!
}

input LocalidadUpsertWithWhereUniqueWithoutDepartamentoInput {
  where: LocalidadWhereUniqueInput!
  update: LocalidadUpdateWithoutDepartamentoDataInput!
  create: LocalidadCreateWithoutDepartamentoInput!
}

input LocalidadUpsertWithWhereUniqueWithoutProvinciaInput {
  where: LocalidadWhereUniqueInput!
  update: LocalidadUpdateWithoutProvinciaDataInput!
  create: LocalidadCreateWithoutProvinciaInput!
}

input LocalidadWhereInput {
  """Logical AND on all given filters."""
  AND: [LocalidadWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocalidadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocalidadWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  codigo_indec: String

  """All values that are not equal to given value."""
  codigo_indec_not: String

  """All values that are contained in given list."""
  codigo_indec_in: [String!]

  """All values that are not contained in given list."""
  codigo_indec_not_in: [String!]

  """All values less than the given value."""
  codigo_indec_lt: String

  """All values less than or equal the given value."""
  codigo_indec_lte: String

  """All values greater than the given value."""
  codigo_indec_gt: String

  """All values greater than or equal the given value."""
  codigo_indec_gte: String

  """All values containing the given string."""
  codigo_indec_contains: String

  """All values not containing the given string."""
  codigo_indec_not_contains: String

  """All values starting with the given string."""
  codigo_indec_starts_with: String

  """All values not starting with the given string."""
  codigo_indec_not_starts_with: String

  """All values ending with the given string."""
  codigo_indec_ends_with: String

  """All values not ending with the given string."""
  codigo_indec_not_ends_with: String
  nombre: String

  """All values that are not equal to given value."""
  nombre_not: String

  """All values that are contained in given list."""
  nombre_in: [String!]

  """All values that are not contained in given list."""
  nombre_not_in: [String!]

  """All values less than the given value."""
  nombre_lt: String

  """All values less than or equal the given value."""
  nombre_lte: String

  """All values greater than the given value."""
  nombre_gt: String

  """All values greater than or equal the given value."""
  nombre_gte: String

  """All values containing the given string."""
  nombre_contains: String

  """All values not containing the given string."""
  nombre_not_contains: String

  """All values starting with the given string."""
  nombre_starts_with: String

  """All values not starting with the given string."""
  nombre_not_starts_with: String

  """All values ending with the given string."""
  nombre_ends_with: String

  """All values not ending with the given string."""
  nombre_not_ends_with: String
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  lon: Float

  """All values that are not equal to given value."""
  lon_not: Float

  """All values that are contained in given list."""
  lon_in: [Float!]

  """All values that are not contained in given list."""
  lon_not_in: [Float!]

  """All values less than the given value."""
  lon_lt: Float

  """All values less than or equal the given value."""
  lon_lte: Float

  """All values greater than the given value."""
  lon_gt: Float

  """All values greater than or equal the given value."""
  lon_gte: Float
  activo: Boolean

  """All values that are not equal to given value."""
  activo_not: Boolean
  provincia: ProvinciaWhereInput
  departamento: DepartamentoWhereInput
}

input LocalidadWhereUniqueInput {
  id: Int
  codigo_indec: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPais(data: PaisCreateInput!): Pais!
  createProvincia(data: ProvinciaCreateInput!): Provincia!
  createLocalidad(data: LocalidadCreateInput!): Localidad!
  createDepartamento(data: DepartamentoCreateInput!): Departamento!
  updatePais(data: PaisUpdateInput!, where: PaisWhereUniqueInput!): Pais
  updateProvincia(data: ProvinciaUpdateInput!, where: ProvinciaWhereUniqueInput!): Provincia
  updateLocalidad(data: LocalidadUpdateInput!, where: LocalidadWhereUniqueInput!): Localidad
  updateDepartamento(data: DepartamentoUpdateInput!, where: DepartamentoWhereUniqueInput!): Departamento
  deletePais(where: PaisWhereUniqueInput!): Pais
  deleteProvincia(where: ProvinciaWhereUniqueInput!): Provincia
  deleteLocalidad(where: LocalidadWhereUniqueInput!): Localidad
  deleteDepartamento(where: DepartamentoWhereUniqueInput!): Departamento
  upsertPais(where: PaisWhereUniqueInput!, create: PaisCreateInput!, update: PaisUpdateInput!): Pais!
  upsertProvincia(where: ProvinciaWhereUniqueInput!, create: ProvinciaCreateInput!, update: ProvinciaUpdateInput!): Provincia!
  upsertLocalidad(where: LocalidadWhereUniqueInput!, create: LocalidadCreateInput!, update: LocalidadUpdateInput!): Localidad!
  upsertDepartamento(where: DepartamentoWhereUniqueInput!, create: DepartamentoCreateInput!, update: DepartamentoUpdateInput!): Departamento!
  updateManyPaises(data: PaisUpdateManyMutationInput!, where: PaisWhereInput): BatchPayload!
  updateManyProvincias(data: ProvinciaUpdateManyMutationInput!, where: ProvinciaWhereInput): BatchPayload!
  updateManyLocalidads(data: LocalidadUpdateManyMutationInput!, where: LocalidadWhereInput): BatchPayload!
  updateManyDepartamentoes(data: DepartamentoUpdateManyMutationInput!, where: DepartamentoWhereInput): BatchPayload!
  deleteManyPaises(where: PaisWhereInput): BatchPayload!
  deleteManyProvincias(where: ProvinciaWhereInput): BatchPayload!
  deleteManyLocalidads(where: LocalidadWhereInput): BatchPayload!
  deleteManyDepartamentoes(where: DepartamentoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pais {
  id: Int!
  codigo: String!
  nombre: String!
  activo: Boolean!
  provincias(where: ProvinciaWhereInput, orderBy: ProvinciaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Provincia!]
}

"""A connection to a list of items."""
type PaisConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaisEdge]!
  aggregate: AggregatePais!
}

input PaisCreateInput {
  codigo: String!
  nombre: String!
  activo: Boolean!
  provincias: ProvinciaCreateManyWithoutPaisInput
}

input PaisCreateOneWithoutProvinciasInput {
  create: PaisCreateWithoutProvinciasInput
  connect: PaisWhereUniqueInput
}

input PaisCreateWithoutProvinciasInput {
  codigo: String!
  nombre: String!
  activo: Boolean!
}

"""An edge in a connection."""
type PaisEdge {
  """The item at the end of the edge."""
  node: Pais!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaisOrderByInput {
  id_ASC
  id_DESC
  codigo_ASC
  codigo_DESC
  nombre_ASC
  nombre_DESC
  activo_ASC
  activo_DESC
}

type PaisPreviousValues {
  id: Int!
  codigo: String!
  nombre: String!
  activo: Boolean!
}

type PaisSubscriptionPayload {
  mutation: MutationType!
  node: Pais
  updatedFields: [String!]
  previousValues: PaisPreviousValues
}

input PaisSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaisSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaisSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaisSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaisWhereInput
}

input PaisUpdateInput {
  codigo: String
  nombre: String
  activo: Boolean
  provincias: ProvinciaUpdateManyWithoutPaisInput
}

input PaisUpdateManyMutationInput {
  codigo: String
  nombre: String
  activo: Boolean
}

input PaisUpdateOneRequiredWithoutProvinciasInput {
  create: PaisCreateWithoutProvinciasInput
  connect: PaisWhereUniqueInput
  update: PaisUpdateWithoutProvinciasDataInput
  upsert: PaisUpsertWithoutProvinciasInput
}

input PaisUpdateWithoutProvinciasDataInput {
  codigo: String
  nombre: String
  activo: Boolean
}

input PaisUpsertWithoutProvinciasInput {
  update: PaisUpdateWithoutProvinciasDataInput!
  create: PaisCreateWithoutProvinciasInput!
}

input PaisWhereInput {
  """Logical AND on all given filters."""
  AND: [PaisWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaisWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaisWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  codigo: String

  """All values that are not equal to given value."""
  codigo_not: String

  """All values that are contained in given list."""
  codigo_in: [String!]

  """All values that are not contained in given list."""
  codigo_not_in: [String!]

  """All values less than the given value."""
  codigo_lt: String

  """All values less than or equal the given value."""
  codigo_lte: String

  """All values greater than the given value."""
  codigo_gt: String

  """All values greater than or equal the given value."""
  codigo_gte: String

  """All values containing the given string."""
  codigo_contains: String

  """All values not containing the given string."""
  codigo_not_contains: String

  """All values starting with the given string."""
  codigo_starts_with: String

  """All values not starting with the given string."""
  codigo_not_starts_with: String

  """All values ending with the given string."""
  codigo_ends_with: String

  """All values not ending with the given string."""
  codigo_not_ends_with: String
  nombre: String

  """All values that are not equal to given value."""
  nombre_not: String

  """All values that are contained in given list."""
  nombre_in: [String!]

  """All values that are not contained in given list."""
  nombre_not_in: [String!]

  """All values less than the given value."""
  nombre_lt: String

  """All values less than or equal the given value."""
  nombre_lte: String

  """All values greater than the given value."""
  nombre_gt: String

  """All values greater than or equal the given value."""
  nombre_gte: String

  """All values containing the given string."""
  nombre_contains: String

  """All values not containing the given string."""
  nombre_not_contains: String

  """All values starting with the given string."""
  nombre_starts_with: String

  """All values not starting with the given string."""
  nombre_not_starts_with: String

  """All values ending with the given string."""
  nombre_ends_with: String

  """All values not ending with the given string."""
  nombre_not_ends_with: String
  activo: Boolean

  """All values that are not equal to given value."""
  activo_not: Boolean
  provincias_every: ProvinciaWhereInput
  provincias_some: ProvinciaWhereInput
  provincias_none: ProvinciaWhereInput
}

input PaisWhereUniqueInput {
  id: Int
  codigo: String
}

type Provincia {
  id: Int!
  pais: Pais!
  codigo: String!
  codigo_indec: String
  nombre: String!
  activo: Boolean!
  localidades(where: LocalidadWhereInput, orderBy: LocalidadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Localidad!]
  departamentos(where: DepartamentoWhereInput, orderBy: DepartamentoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Departamento!]
}

"""A connection to a list of items."""
type ProvinciaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProvinciaEdge]!
  aggregate: AggregateProvincia!
}

input ProvinciaCreateInput {
  codigo: String!
  codigo_indec: String
  nombre: String!
  activo: Boolean!
  pais: PaisCreateOneWithoutProvinciasInput!
  localidades: LocalidadCreateManyWithoutProvinciaInput
  departamentos: DepartamentoCreateManyWithoutProvinciaInput
}

input ProvinciaCreateManyWithoutPaisInput {
  create: [ProvinciaCreateWithoutPaisInput!]
  connect: [ProvinciaWhereUniqueInput!]
}

input ProvinciaCreateOneWithoutDepartamentosInput {
  create: ProvinciaCreateWithoutDepartamentosInput
  connect: ProvinciaWhereUniqueInput
}

input ProvinciaCreateOneWithoutLocalidadesInput {
  create: ProvinciaCreateWithoutLocalidadesInput
  connect: ProvinciaWhereUniqueInput
}

input ProvinciaCreateWithoutDepartamentosInput {
  codigo: String!
  codigo_indec: String
  nombre: String!
  activo: Boolean!
  pais: PaisCreateOneWithoutProvinciasInput!
  localidades: LocalidadCreateManyWithoutProvinciaInput
}

input ProvinciaCreateWithoutLocalidadesInput {
  codigo: String!
  codigo_indec: String
  nombre: String!
  activo: Boolean!
  pais: PaisCreateOneWithoutProvinciasInput!
  departamentos: DepartamentoCreateManyWithoutProvinciaInput
}

input ProvinciaCreateWithoutPaisInput {
  codigo: String!
  codigo_indec: String
  nombre: String!
  activo: Boolean!
  localidades: LocalidadCreateManyWithoutProvinciaInput
  departamentos: DepartamentoCreateManyWithoutProvinciaInput
}

"""An edge in a connection."""
type ProvinciaEdge {
  """The item at the end of the edge."""
  node: Provincia!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProvinciaOrderByInput {
  id_ASC
  id_DESC
  codigo_ASC
  codigo_DESC
  codigo_indec_ASC
  codigo_indec_DESC
  nombre_ASC
  nombre_DESC
  activo_ASC
  activo_DESC
}

type ProvinciaPreviousValues {
  id: Int!
  codigo: String!
  codigo_indec: String
  nombre: String!
  activo: Boolean!
}

input ProvinciaScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProvinciaScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProvinciaScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProvinciaScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  codigo: String

  """All values that are not equal to given value."""
  codigo_not: String

  """All values that are contained in given list."""
  codigo_in: [String!]

  """All values that are not contained in given list."""
  codigo_not_in: [String!]

  """All values less than the given value."""
  codigo_lt: String

  """All values less than or equal the given value."""
  codigo_lte: String

  """All values greater than the given value."""
  codigo_gt: String

  """All values greater than or equal the given value."""
  codigo_gte: String

  """All values containing the given string."""
  codigo_contains: String

  """All values not containing the given string."""
  codigo_not_contains: String

  """All values starting with the given string."""
  codigo_starts_with: String

  """All values not starting with the given string."""
  codigo_not_starts_with: String

  """All values ending with the given string."""
  codigo_ends_with: String

  """All values not ending with the given string."""
  codigo_not_ends_with: String
  codigo_indec: String

  """All values that are not equal to given value."""
  codigo_indec_not: String

  """All values that are contained in given list."""
  codigo_indec_in: [String!]

  """All values that are not contained in given list."""
  codigo_indec_not_in: [String!]

  """All values less than the given value."""
  codigo_indec_lt: String

  """All values less than or equal the given value."""
  codigo_indec_lte: String

  """All values greater than the given value."""
  codigo_indec_gt: String

  """All values greater than or equal the given value."""
  codigo_indec_gte: String

  """All values containing the given string."""
  codigo_indec_contains: String

  """All values not containing the given string."""
  codigo_indec_not_contains: String

  """All values starting with the given string."""
  codigo_indec_starts_with: String

  """All values not starting with the given string."""
  codigo_indec_not_starts_with: String

  """All values ending with the given string."""
  codigo_indec_ends_with: String

  """All values not ending with the given string."""
  codigo_indec_not_ends_with: String
  nombre: String

  """All values that are not equal to given value."""
  nombre_not: String

  """All values that are contained in given list."""
  nombre_in: [String!]

  """All values that are not contained in given list."""
  nombre_not_in: [String!]

  """All values less than the given value."""
  nombre_lt: String

  """All values less than or equal the given value."""
  nombre_lte: String

  """All values greater than the given value."""
  nombre_gt: String

  """All values greater than or equal the given value."""
  nombre_gte: String

  """All values containing the given string."""
  nombre_contains: String

  """All values not containing the given string."""
  nombre_not_contains: String

  """All values starting with the given string."""
  nombre_starts_with: String

  """All values not starting with the given string."""
  nombre_not_starts_with: String

  """All values ending with the given string."""
  nombre_ends_with: String

  """All values not ending with the given string."""
  nombre_not_ends_with: String
  activo: Boolean

  """All values that are not equal to given value."""
  activo_not: Boolean
}

type ProvinciaSubscriptionPayload {
  mutation: MutationType!
  node: Provincia
  updatedFields: [String!]
  previousValues: ProvinciaPreviousValues
}

input ProvinciaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProvinciaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProvinciaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProvinciaSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProvinciaWhereInput
}

input ProvinciaUpdateInput {
  codigo: String
  codigo_indec: String
  nombre: String
  activo: Boolean
  pais: PaisUpdateOneRequiredWithoutProvinciasInput
  localidades: LocalidadUpdateManyWithoutProvinciaInput
  departamentos: DepartamentoUpdateManyWithoutProvinciaInput
}

input ProvinciaUpdateManyDataInput {
  codigo: String
  codigo_indec: String
  nombre: String
  activo: Boolean
}

input ProvinciaUpdateManyMutationInput {
  codigo: String
  codigo_indec: String
  nombre: String
  activo: Boolean
}

input ProvinciaUpdateManyWithoutPaisInput {
  create: [ProvinciaCreateWithoutPaisInput!]
  connect: [ProvinciaWhereUniqueInput!]
  set: [ProvinciaWhereUniqueInput!]
  disconnect: [ProvinciaWhereUniqueInput!]
  delete: [ProvinciaWhereUniqueInput!]
  update: [ProvinciaUpdateWithWhereUniqueWithoutPaisInput!]
  updateMany: [ProvinciaUpdateManyWithWhereNestedInput!]
  deleteMany: [ProvinciaScalarWhereInput!]
  upsert: [ProvinciaUpsertWithWhereUniqueWithoutPaisInput!]
}

input ProvinciaUpdateManyWithWhereNestedInput {
  where: ProvinciaScalarWhereInput!
  data: ProvinciaUpdateManyDataInput!
}

input ProvinciaUpdateOneRequiredWithoutDepartamentosInput {
  create: ProvinciaCreateWithoutDepartamentosInput
  connect: ProvinciaWhereUniqueInput
  update: ProvinciaUpdateWithoutDepartamentosDataInput
  upsert: ProvinciaUpsertWithoutDepartamentosInput
}

input ProvinciaUpdateOneRequiredWithoutLocalidadesInput {
  create: ProvinciaCreateWithoutLocalidadesInput
  connect: ProvinciaWhereUniqueInput
  update: ProvinciaUpdateWithoutLocalidadesDataInput
  upsert: ProvinciaUpsertWithoutLocalidadesInput
}

input ProvinciaUpdateWithoutDepartamentosDataInput {
  codigo: String
  codigo_indec: String
  nombre: String
  activo: Boolean
  pais: PaisUpdateOneRequiredWithoutProvinciasInput
  localidades: LocalidadUpdateManyWithoutProvinciaInput
}

input ProvinciaUpdateWithoutLocalidadesDataInput {
  codigo: String
  codigo_indec: String
  nombre: String
  activo: Boolean
  pais: PaisUpdateOneRequiredWithoutProvinciasInput
  departamentos: DepartamentoUpdateManyWithoutProvinciaInput
}

input ProvinciaUpdateWithoutPaisDataInput {
  codigo: String
  codigo_indec: String
  nombre: String
  activo: Boolean
  localidades: LocalidadUpdateManyWithoutProvinciaInput
  departamentos: DepartamentoUpdateManyWithoutProvinciaInput
}

input ProvinciaUpdateWithWhereUniqueWithoutPaisInput {
  where: ProvinciaWhereUniqueInput!
  data: ProvinciaUpdateWithoutPaisDataInput!
}

input ProvinciaUpsertWithoutDepartamentosInput {
  update: ProvinciaUpdateWithoutDepartamentosDataInput!
  create: ProvinciaCreateWithoutDepartamentosInput!
}

input ProvinciaUpsertWithoutLocalidadesInput {
  update: ProvinciaUpdateWithoutLocalidadesDataInput!
  create: ProvinciaCreateWithoutLocalidadesInput!
}

input ProvinciaUpsertWithWhereUniqueWithoutPaisInput {
  where: ProvinciaWhereUniqueInput!
  update: ProvinciaUpdateWithoutPaisDataInput!
  create: ProvinciaCreateWithoutPaisInput!
}

input ProvinciaWhereInput {
  """Logical AND on all given filters."""
  AND: [ProvinciaWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProvinciaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProvinciaWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  codigo: String

  """All values that are not equal to given value."""
  codigo_not: String

  """All values that are contained in given list."""
  codigo_in: [String!]

  """All values that are not contained in given list."""
  codigo_not_in: [String!]

  """All values less than the given value."""
  codigo_lt: String

  """All values less than or equal the given value."""
  codigo_lte: String

  """All values greater than the given value."""
  codigo_gt: String

  """All values greater than or equal the given value."""
  codigo_gte: String

  """All values containing the given string."""
  codigo_contains: String

  """All values not containing the given string."""
  codigo_not_contains: String

  """All values starting with the given string."""
  codigo_starts_with: String

  """All values not starting with the given string."""
  codigo_not_starts_with: String

  """All values ending with the given string."""
  codigo_ends_with: String

  """All values not ending with the given string."""
  codigo_not_ends_with: String
  codigo_indec: String

  """All values that are not equal to given value."""
  codigo_indec_not: String

  """All values that are contained in given list."""
  codigo_indec_in: [String!]

  """All values that are not contained in given list."""
  codigo_indec_not_in: [String!]

  """All values less than the given value."""
  codigo_indec_lt: String

  """All values less than or equal the given value."""
  codigo_indec_lte: String

  """All values greater than the given value."""
  codigo_indec_gt: String

  """All values greater than or equal the given value."""
  codigo_indec_gte: String

  """All values containing the given string."""
  codigo_indec_contains: String

  """All values not containing the given string."""
  codigo_indec_not_contains: String

  """All values starting with the given string."""
  codigo_indec_starts_with: String

  """All values not starting with the given string."""
  codigo_indec_not_starts_with: String

  """All values ending with the given string."""
  codigo_indec_ends_with: String

  """All values not ending with the given string."""
  codigo_indec_not_ends_with: String
  nombre: String

  """All values that are not equal to given value."""
  nombre_not: String

  """All values that are contained in given list."""
  nombre_in: [String!]

  """All values that are not contained in given list."""
  nombre_not_in: [String!]

  """All values less than the given value."""
  nombre_lt: String

  """All values less than or equal the given value."""
  nombre_lte: String

  """All values greater than the given value."""
  nombre_gt: String

  """All values greater than or equal the given value."""
  nombre_gte: String

  """All values containing the given string."""
  nombre_contains: String

  """All values not containing the given string."""
  nombre_not_contains: String

  """All values starting with the given string."""
  nombre_starts_with: String

  """All values not starting with the given string."""
  nombre_not_starts_with: String

  """All values ending with the given string."""
  nombre_ends_with: String

  """All values not ending with the given string."""
  nombre_not_ends_with: String
  activo: Boolean

  """All values that are not equal to given value."""
  activo_not: Boolean
  pais: PaisWhereInput
  localidades_every: LocalidadWhereInput
  localidades_some: LocalidadWhereInput
  localidades_none: LocalidadWhereInput
  departamentos_every: DepartamentoWhereInput
  departamentos_some: DepartamentoWhereInput
  departamentos_none: DepartamentoWhereInput
}

input ProvinciaWhereUniqueInput {
  id: Int
  codigo: String
  codigo_indec: String
}

type Query {
  paises(where: PaisWhereInput, orderBy: PaisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pais]!
  provincias(where: ProvinciaWhereInput, orderBy: ProvinciaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Provincia]!
  localidads(where: LocalidadWhereInput, orderBy: LocalidadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Localidad]!
  departamentoes(where: DepartamentoWhereInput, orderBy: DepartamentoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Departamento]!
  pais(where: PaisWhereUniqueInput!): Pais
  provincia(where: ProvinciaWhereUniqueInput!): Provincia
  localidad(where: LocalidadWhereUniqueInput!): Localidad
  departamento(where: DepartamentoWhereUniqueInput!): Departamento
  paisesConnection(where: PaisWhereInput, orderBy: PaisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaisConnection!
  provinciasConnection(where: ProvinciaWhereInput, orderBy: ProvinciaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProvinciaConnection!
  localidadsConnection(where: LocalidadWhereInput, orderBy: LocalidadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocalidadConnection!
  departamentoesConnection(where: DepartamentoWhereInput, orderBy: DepartamentoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartamentoConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  pais(where: PaisSubscriptionWhereInput): PaisSubscriptionPayload
  provincia(where: ProvinciaSubscriptionWhereInput): ProvinciaSubscriptionPayload
  localidad(where: LocalidadSubscriptionWhereInput): LocalidadSubscriptionPayload
  departamento(where: DepartamentoSubscriptionWhereInput): DepartamentoSubscriptionPayload
}
